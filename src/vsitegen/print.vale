
struct PrintHelper {
  out &Output;
  valestromPath str;
  metadata &Metadata;
  printedFirstNotes! bool;
  tableOfContents &UnorderedList;
  codeSnippetsPrinted! int;
}

fn ns(p &PrintHelper, class str) str {
  p.metadata.namespace + " " + class
}


struct TableOfContentsBuilder {
  headers List<&Header>;
}

fn wrapTocInSeriesList(page &Page, tocRootList UnorderedList) UnorderedList {
  if (page.metadata.seriesEntries.len() > 0) {
    seriesList = UnorderedList(List<ListMember>());

    while (page.metadata.seriesEntries.len() > 0 and
        (page.metadata.seriesEntries.get(0).text != "" or
            page.metadata.seriesEntries.get(0).url != "")) {
      seriesList.members.add(ListItem(page.metadata.seriesEntries.remove(0)));
    }

    vassert(page.metadata.seriesEntries.len() > 0, "wat bork");
    link = page.metadata.seriesEntries.remove(0);
    vassert(link.text == "" and link.url == "", "wat zork");
    seriesList.members.add(ListItem(Bold(Text(slice(page.metadata.title + " *")))));
    seriesList.members.add(tocRootList);

    while (page.metadata.seriesEntries.len() > 0 and
        (page.metadata.seriesEntries.get(0).text != "" or
            page.metadata.seriesEntries.get(0).url != "")) {
      seriesList.members.add(ListItem(page.metadata.seriesEntries.remove(0)));
    }

    ret seriesList;
  } else {
    ret tocRootList;
  }
}


fn copySeriesNextLink(page &Page) Opt<Link> {
  foundThisPage! = false;
  seriesNextLink! Opt<Link> = None<Link>();
  each (page.metadata.seriesEntries) (link){
    if (link.text == "" and link.url == "") {
      mut foundThisPage = true;
    } else if (foundThisPage and seriesNextLink.isEmpty()) {
      mut seriesNextLink = Some(copy(link));
    }
  }
  ret seriesNextLink;
}


fn printPage(output &Output, valestromPath str, page &Page) {

  seriesNextLink = copySeriesNextLink(page);

  unSeriesdTocRootList = UnorderedList(List<ListMember>());

  // A stack of all the currently open lists.
  openTocLists = List<&UnorderedList>();
  openTocLists.add(&unSeriesdTocRootList);
  page.members.each({ populateTableOfContents(&openTocLists, _); });
  drop(openTocLists);

  tocRootList = wrapTocInSeriesList(page, unSeriesdTocRootList);

  p = PrintHelper(output, valestromPath, page.metadata, false, &tocRootList, 0);


  p.out.println("""
<!DOCTYPE html>
<html>
<head>
<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
<meta content="utf-8" http-equiv="encoding">
<style type="text/css">
body {
  font-family: 'Lato', Roboto, Tahoma, Arial;
  font-size: 12pt;
  margin: 0;
}
</style>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
<title>{page.metadata.title}</title>
<link rel="stylesheet" type="text/css" href="/components/Header.css"/>
<link rel="stylesheet" type="text/css" href="/components/Footer.css"/>
<link rel="stylesheet" type="text/css" href="/components/Snippet.css"/>
<link rel="stylesheet" type="text/css" href="/components/Annotated.css"/>
<link rel="stylesheet" type="text/css" href="/common.css"/>
<link href="https:\/\/fonts.googleapis.com/css?family=Lato|Roboto|Roboto+Mono" rel="stylesheet">

<link rel="stylesheet" href="\/\/cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/agate.min.css">
<script src="\/\/cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/highlight.min.js"></script>
<!-- and it's easy to individually load additional languages -->
<script charset="UTF-8"
 src="https:\/\/cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/languages/go.min.js"></script>

<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https:\/\/www.gstatic.com/firebasejs/7.16.1/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https:\/\/firebase.google.com/docs/web/setup#available-libraries -->
<script src="https:\/\/www.gstatic.com/firebasejs/7.16.1/firebase-analytics.js"></script>

<script>
  \/\/ Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: " AIzaSyBGXQQdJQJ_KkEz8mz1HSia3CMBXqmpKk0 ",
    authDomain: "valesite.firebaseapp.com",
    databaseURL: "https:\/\/valesite.firebaseio.com",
    projectId: "valesite",
    storageBucket: "valesite.appspot.com",
    messagingSenderId: "670338061455",
    appId: "1:670338061455:web:cfbb4a2f69f9bd7a83ccfa",
    measurementId: "G-G3JH78EBKK"
  };
  \/\/ Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>

</head>
<body>
  {blogHeader(p.metadata.realm == "blog")}

  <div class="{p.ns("page {page.metadata.layout} isomargined")}">
  """);

  if (page.metadata.layout == "annotated") {
    p.out.println("""
    <div class="{p.ns("columns")}">
      <div class="{p.ns("page-left")}">
    """);
  }


  // This is the first area div, we occasionally printPageMember
  // will close it, add some notes, and open a new one.
  // Also print out the title and stuff in the first area.
  p.out.println("""
        <div class="{p.ns("area")}">
          <div class="{p.ns("area-contents")}">
  """);

  printHeader(&p);

  page.members.each({ printPageMember(&p, _); });

  // End the currently open area div
  p.out.println("""
          </div>
        </div>
  """);

  if (not seriesNextLink.isEmpty()) {
    p.out.println("""
        <div class="{p.ns("area")}">
          <div class="{p.ns("area-contents")}">
    """);

    link = seriesNextLink.get();
    inlines = List<InlineNode>();
    inlines.add(Bold(Text("Next: ".slice())));
    inlines.add(Link(link.text, link.url));
    para = Paragraph(Compound(inlines));
    s = Section(List<SectionMember>());
    s.members.add(para);
    printSection(&p, &s);

    p.out.println("""
            </div>
          </div>
    """);
  }

  if (page.metadata.layout == "annotated") {
    p.out.println("""
      </div>
      <div class="{p.ns("page-right")}">
      </div>
    </div>
    """);
  }

  p.out.println("""
  </div>

  {blogFooter()} 
  <script src="/components/Annotated.js"></script>
</body>
</html>
  """);
}

fn getHeaderText(header &Header) str {
  textNodes = List<StrSlice>();
  collectTextNodes(&textNodes, header.contents);
  source! = "";
  each (&textNodes) { mut source = source + _; }
  ret source;
}

fn urlifyHeadingText(header &Header) str {
  source! = getHeaderText(header).slice();

  result! = "";
  while (source.len() > 0) {
    char = source.slice(0, 1);
    mut source = source.slice(1);
    if (char.toAscii() >= "0".slice().toAscii() and char.toAscii() <= "9".slice().toAscii()) {
      mut result = result + char;
    } else if (char == "-" or char.isWhitespace()) {
      mut result = result + "-";
    } else if (char.toAscii() >= "a".slice().toAscii() and char.toAscii() <= "z".slice().toAscii()) {
      mut result = result + char;
    } else if (char.toAscii() >= "A".slice().toAscii() and char.toAscii() <= "Z".slice().toAscii()) {
      mut result = result + fromAscii(char.toAscii() + ("a".slice().toAscii() - "A".slice().toAscii()));
    }
  }
  ret result;
}

fn printHeader(p &PrintHelper) {
  p.out.println("""
        <div class="{p.ns("metadata")}">
          <h1 class="{p.ns("noline cozy")}" style="margin-top: 8px">{p.metadata.title}</h1>
  """);

  if (p.metadata.subtitle != "") {
    p.out.println("""<div class="{p.ns("subtitle content cozy")}">{p.metadata.subtitle}</div>""");
  }
  if (p.metadata.date != "" or p.metadata.author != "") {
    p.out.println("""
            <div class="{p.ns("content")}"><span class="{p.ns("date")}">{p.metadata.date}</span> <span class="{p.ns("author")}">&nbsp;&mdash;&nbsp; {p.metadata.author}</span></div>
    """);
  }
  p.out.println("""</div>""");

}


fn populateTableOfContents(openTocLists &List<&UnorderedList>, virtual this &PageMember) abstract;
fn populateTableOfContents(openTocLists &List<&UnorderedList>, this &Notes impl PageMember) { }
fn populateTableOfContents(openTocLists &List<&UnorderedList>, this &Section impl PageMember) {
  this.members.each({ populateTableOfContents2(openTocLists, _); });
}

fn populateTableOfContents2(openTocLists &List<&UnorderedList>, virtual this &SectionMember) abstract;
fn populateTableOfContents2(openTocLists &List<&UnorderedList>, header &Header impl SectionMember) {
  while (header.level > openTocLists.len()) {
    newList = UnorderedList(List<ListMember>());
    newListBorrow = &newList;
    openTocLists.get(openTocLists.len() - 1).members.add(newList);
    openTocLists.add(newListBorrow);
  }
  while (header.level < openTocLists.len()) {
    openTocLists.remove(openTocLists.len() - 1);
  }

  openTocLists.get(openTocLists.len() - 1)
      .members.add(
          ListItem(
              Link(
                  getHeaderText(header).slice(),
                  ("#" + urlifyHeadingText(header)).slice())));
}
fn populateTableOfContents2(openTocLists &List<&UnorderedList>, this &UnorderedList impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&UnorderedList>, this &Paragraph impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&UnorderedList>, this &Split impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&UnorderedList>, this &CodeSnippet impl SectionMember) { }
fn populateTableOfContents2(openTocLists &List<&UnorderedList>, this &Quote impl SectionMember) { }






fn printPageMember(p &PrintHelper, virtual this &PageMember) abstract;
fn printPageMember(p &PrintHelper, this &Notes impl PageMember) {
  printNotes(this, p);
}
fn printPageMember(p &PrintHelper, this &Section impl PageMember) {
  printSection(p, this);
}
fn printSection(p &PrintHelper, this &Section) {
  p.out.println("""<section class="{p.ns("")}">""");

  this.members.each({ printSectionMember(p, _) });

  p.out.println("");
  p.out.println("</section>");
}

fn printSectionMember(p &PrintHelper, virtual this &SectionMember) abstract;
fn printSectionMember(p &PrintHelper, this &Header impl SectionMember) {
  p.out.println("""<h{this.level + 1} class="{p.ns("")}" id="{urlifyHeadingText(this)}">""");
  printInlineNode(p, this.contents);
  p.out.println("""</h{this.level + 1}>""");
}
fn printSectionMember(p &PrintHelper, this &UnorderedList impl SectionMember) {
  printList(p, this);
}
fn printSectionMember(p &PrintHelper, this &Paragraph impl SectionMember) {
  p.out.println("""<p class="{p.ns("")}">""");
  printInlineNode(p, this.contents);
  p.out.println("");
  p.out.println("</p>");
}
fn printSectionMember(p &PrintHelper, this &Split impl SectionMember) {
  p.out.println("""<div class="{p.ns("split")}">""");
  p.out.println("""<div class="{p.ns("split-left")}">""");
  this.left.each({ printSection(p, _); });
  p.out.println("""</div>""");
  p.out.println("""<div class="{p.ns("split-right")}">""");
  this.right.each({ printSection(p, _); });
  p.out.println("""</div>""");
  p.out.println("""</div>""");
}
fn printSectionMember(p &PrintHelper, this &Quote impl SectionMember) {
  p.out.println("""<div class="{p.ns("quote")}">""");
  printInlineNode(p, this.contents);
  p.out.println("");
  p.out.println("</div>");
}
fn printSectionMember(p &PrintHelper, this &CodeSnippet impl SectionMember) {

  langClass = if (this.language.len() > 0) { "language-" + this.language } else { "" };

  p.out.print("""
    <div class="{p.ns("c-snippet root {langClass}")}">
      <div class="{p.ns("c-snippet header")}">{this.language}</div>
      <div class="{p.ns("c-snippet code")}">""");

  codeHtml =
    if (this.language == "Vale" or this.language == "vale") {
      println("Vale:");
      println(this.code);
      writeStringToFile("/tmp/highlight{p.codeSnippetsPrinted}.vale", this.code.str());
      executeResult = executeProgram("java -cp {p.valestromPath} net.verdagon.vale.driver.Driver highlight /tmp/highlight{p.codeSnippetsPrinted}.vale -oh /tmp/highlight{p.codeSnippetsPrinted}.html");
      if (executeResult.returnCode != 0) {
        panic(
            "Highlighting failed:\n" + executeResult.stdout + "\n" + executeResult.stderr);
      }
      s = readFileAsString("/tmp/highlight{p.codeSnippetsPrinted}.html").slice();
      println("HTML:");
      println(s);
      mut p.codeSnippetsPrinted = p.codeSnippetsPrinted + 1;
      = s;
    } else {
      = this.code;
    };
  printWithChevronNotes(p, codeHtml);

  p.out.println(
   """</div>
    </div>
  """);
}

fn printWithChevronNotes(p &PrintHelper, s StrSlice) {
  iter = InputIter(s, true);
  while (iter.hasNext()) {
    if (iter.skipIfNext("«")) {
      // Parser should have replaced the name with an id, like «mynote» to «13».
      noteIdStr = iter.getUntilExpected("»");
      noteId = noteIdStr.int().get();
      printNoteAnchor(p, &NoteAnchor(noteId));
    } else {
      p.out.print(iter.getNext());
    }
  }
}


fn printInlineNode(p &PrintHelper, virtual this &InlineNode) abstract;
fn printInlineNode(p &PrintHelper, this &Bold impl InlineNode) {
  p.out.print("<b>");
  printInlineNode(p, this.inner);
  p.out.print("</b>");
}
fn printInlineNode(p &PrintHelper, this &Italic impl InlineNode) {
  p.out.print("<i>");
  printInlineNode(p, this.inner);
  p.out.print("</i>");
}
fn printInlineNode(p &PrintHelper, this &Text impl InlineNode) {
  p.out.print(this.text);
}
fn printInlineNode(p &PrintHelper, this &InlineCode impl InlineNode) {
  p.out.print("""<span class="{p.ns("inline-code")}">""");
  p.out.print(
    this.inner.replaceAll("<".slice(), "&lt;".slice())
      .replaceAll(">".slice(), "&gt;".slice()));
  p.out.print("</span>");
}
fn printInlineNode(p &PrintHelper, this &Link impl InlineNode) {
  p.out.print("""<a class="{p.ns("")}" href="{this.url}">{this.text}</a>""");
}
fn printInlineNode(p &PrintHelper, this &NoteAnchor impl InlineNode) {
  printNoteAnchor(p, this);
}
fn printNoteAnchor(p &PrintHelper, this &NoteAnchor) {
  p.out.print("""<a class="{p.ns("note-anchor note-color{this.id mod 6}")}" href="#note{this.id}" data-noteId="{this.id}">{this.id}</a>""");
}
fn printInlineNode(p &PrintHelper, this &Compound impl InlineNode) {
  this.inners.each({ printInlineNode(p, _) });
}




fn collectTextNodes(textNodes &List<StrSlice>, virtual this &InlineNode) abstract;
fn collectTextNodes(textNodes &List<StrSlice>, this &Text impl InlineNode) {
  textNodes.add(this.text);
}
fn collectTextNodes(textNodes &List<StrSlice>, this &Compound impl InlineNode) {
  this.inners.each({ collectTextNodes(textNodes, _) });
}
fn collectTextNodes(textNodes &List<StrSlice>, this &Bold impl InlineNode) {
  collectTextNodes(textNodes, this.inner);
}
fn collectTextNodes(textNodes &List<StrSlice>, this &Italic impl InlineNode) {
  collectTextNodes(textNodes, this.inner);
}
fn collectTextNodes(textNodes &List<StrSlice>, this &InlineCode impl InlineNode) { }
fn collectTextNodes(textNodes &List<StrSlice>, this &Link impl InlineNode) { }
fn collectTextNodes(textNodes &List<StrSlice>, this &NoteAnchor impl InlineNode) { }




fn printList(p &PrintHelper, list &UnorderedList) {
  p.out.println("""<ul class="{p.ns("")}">""");

  list.members.each({ printListMember(p, _); });

  p.out.println("</ul>");
}
fn printListMember(p &PrintHelper, virtual this &ListMember) abstract;
fn printListMember(p &PrintHelper, this &UnorderedList impl ListMember) {
  printList(p, this);
}
fn printListMember(p &PrintHelper, this &ListItem impl ListMember) {
  p.out.println("""<li class="{p.ns("")}">""");
  printInlineNode(p, this.contents);
  p.out.println("");
  p.out.println("</li>");
}



fn printNotes(notes &Notes, p &PrintHelper) {
  // End the contents div in the current area
  p.out.println("""
      </div>
  """);
  p.out.println("""<div class="{p.ns("area-notes")}">""");

  if (p.metadata.layout == "annotated" and not p.printedFirstNotes) {
    p.out.println("""
      <div class="{p.ns("c-toc root")}">
      {if (p.metadata.seriesName != "") { p.metadata.seriesName } else { "<b>{p.metadata.title}</b>".slice() }}
    """);
    printList(p, p.tableOfContents);
    p.out.println("""
      </div>
      <div class="{p.ns("notes-header")}"><div>Notes</div></div>
    """);
  }

  notes.ids.each((id){
    vassert(
        notes.noteContentsById.has(id),
        id + " not in notes?");
    noteContents =
        notes.noteContentsById.get(id).get();

    p.out.println("""<div id="note{id}" class="{p.ns("note")}" data-noteId="{id}">""");
    p.out.println("""<div class="{p.ns("note-starter note-color{id mod 6}")}">{id}</div>""");
    printSection(p, noteContents);
    p.out.println("</div>");
  });

  p.out.println("</div>");

  // End the current area div, start a new one and start up a contents div
  p.out.println("""
    </div>
    <div class="{p.ns("area")}">
      <div class="{p.ns("area-contents")}">
  """);

  mut p.printedFirstNotes = true;
}
