
struct Page {
  metadata Metadata;
  members List<PageMember>;
}

interface PageMember {}

struct Metadata {
  title StrSlice;
  subtitle StrSlice;
  author StrSlice;
  date StrSlice;
  path StrSlice;
  namespace StrSlice;
}

struct Section {
  members List<SectionMember>;
}
impl PageMember for Section;


struct CollectedNotes {
  noteIds List<StrSlice>;
  noteContents HashMap<StrSlice, Section, StrSliceHasher, StrSliceEquator>;
}
impl PageMember for CollectedNotes;
fn CollectedNotes() CollectedNotes {
  CollectedNotes(
    List<StrSlice>(),
    HashMap<StrSlice, Section, StrSliceHasher, StrSliceEquator>(
      StrSliceHasher(), StrSliceEquator()))
}



interface SectionMember {}

struct Paragraph {
  contents InlineNode;
}
impl SectionMember for Paragraph;

struct UnorderedList {
  members List<ListMember>;
}
impl SectionMember for UnorderedList;

interface ListMember {}
impl ListMember for UnorderedList;

struct ListItem {
  contents InlineNode;
}
impl ListMember for ListItem;


interface InlineNode {}

struct Compound { inners List<InlineNode>; }
impl InlineNode for Compound;

struct Bold { inner InlineNode; }
impl InlineNode for Bold;

struct Italic { inner InlineNode; }
impl InlineNode for Italic;

struct Text { text StrSlice; }
impl InlineNode for Text;

struct Code { inner StrSlice; }
impl InlineNode for Code;

struct NoteAnchor { name StrSlice; }
impl InlineNode for NoteAnchor;
